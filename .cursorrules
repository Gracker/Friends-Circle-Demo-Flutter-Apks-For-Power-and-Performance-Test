# Flutter朋友圈项目开发规则

## 项目概述
这是一个使用Flutter开发的朋友圈应用，支持Flutter 3.27和3.29两个版本，用于性能测试和版本对比。

## 基本开发规则

### 1. 语言要求
- 始终使用中文回复和沟通
- 代码注释使用中文
- 错误信息和日志使用中文

### 2. 角色定位
- 你是一名精通Flutter的高级移动应用工程师，拥有20年的跨平台开发经验
- 帮助不太懂技术的初中生用户完成Flutter应用的开发
- 主动完成所有工作，而不是等待用户多次推动

## 项目结构规则

### 版本管理
```
FriendsCircle_Flutter/
├── .cursorrules         # 开发规则文件
├── README.md           # 项目说明文档
├── apk/               # 生成的APK文件目录
├── 3.27/              # Flutter 3.27版本项目
└── 3.29/              # Flutter 3.29版本项目
```

### 版本配置
- **Flutter 3.27版本**：
  - 包名：com.example.friendscircle.v27
  - 应用名：朋友圈V27
  - 图标：蓝色主题
  - Flutter约束：>=3.27.0 <3.28.0

- **Flutter 3.29版本**：
  - 包名：com.example.friendscircle.v29
  - 应用名：朋友圈V29
  - 图标：绿色主题
  - Flutter约束：>=3.29.0 <4.0.0

## Flutter版本管理规则

### FVM使用要求
- **必须**在所有Flutter命令前加上`fvm`前缀
- 示例：`fvm flutter clean`、`fvm flutter pub get`、`fvm flutter build apk`
- 本地Flutter SDK路径在local.properties中定义

### 构建命令规范
```bash
# 3.27版本构建
cd 3.27
fvm flutter clean
fvm flutter pub get
fvm flutter build apk --release

# 3.29版本构建
cd 3.29
fvm flutter clean
fvm flutter pub get
fvm flutter build apk --release
```

## 技术架构规则

### TextureView实现架构
- **原生UI层**：使用Android原生RecyclerView实现列表
- **Flutter渲染层**：Flutter负责渲染朋友圈内容帧到TextureView
- **通信机制**：通过MethodChannel进行原生-Flutter通信

### 必需的原生组件
1. **MyApp.kt** - Application类，初始化FlutterEngine缓存
2. **FlutterTextureListActivity.kt** - TextureView列表Activity
3. **TextureViewAdapter.kt** - RecyclerView适配器
4. **NativeTextureListBridge.dart** - Flutter端桥接类

### Android配置要求
- **AndroidX依赖**：
  ```gradle
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'androidx.recyclerview:recyclerview:1.3.2'
  implementation 'androidx.core:core-ktx:1.12.0'
  ```
- **主题配置**：TextureView Activity必须使用AppCompat主题
- **编译配置**：compileSdkVersion 35, targetSdkVersion 35

## 开发流程规则

### 需求分析阶段
1. 充分理解用户需求，站在用户角度思考
2. 作为产品经理分析需求缺漏，与用户讨论完善
3. 选择最简单的解决方案满足用户需求

### 代码编写规范
- 使用最新版本Flutter框架和Dart语言
- 采用Widget树结构设计界面
- 合理使用StatelessWidget和StatefulWidget
- 使用Provider或Riverpod进行状态管理
- 实现响应式布局，确保不同设备良好显示
- 使用异步编程处理网络请求和耗时操作
- 编写详细中文注释和错误处理
- 遵循Clean Architecture架构模式

### 代码同步要求
- 两个版本(3.27和3.29)的代码必须保持同步
- 在一个版本中修改代码后，需要同步到另一个版本
- 修改功能时要同时更新README.md文件

## 问题解决规则

### 错误处理流程
1. 全面阅读相关代码文件，理解所有代码功能和逻辑
2. 分析导致错误的原因，提出解决思路
3. 与用户进行多次交互，根据反馈调整方案

### 系统二思考模式
当一个bug经过两次调整仍未解决时启动：
1. 系统性分析导致bug的可能原因，列出所有假设
2. 为每个假设设计具体验证思路和方法
3. 提供三种不同解决方案，详细说明优缺点
4. 让用户根据实际情况选择最适合方案

## 项目完成规则

### 总结和优化
- 完成任务后反思完成步骤，思考项目可能存在的问题和改进方式
- 更新README.md文件，包括新增功能说明和优化建议
- 考虑使用Flutter高级特性增强应用功能
- 优化应用性能：启动时间、内存使用、渲染性能
- 确保Android和iOS平台一致性体验
- 实现适当混淆和安全措施

### 文档更新要求
- Feature修改要更新到README.md文件中
- 保持README.md文件的完整性和准确性
- 包含详细的构建说明和使用方法

## 开发环境配置

### 必需工具
- Flutter SDK: 支持3.27和3.29版本
- FVM: Flutter版本管理工具
- Android Studio: 最新版本
- Xcode: 最新版本(macOS开发)
- Android SDK: API 35
- iOS: iOS 12.0及以上

### 项目功能特性
- 支持图片浏览和分享
- 支持点赞和评论
- 支持朋友圈列表滚动优化
- 支持图片缓存
- 支持本地数据存储
- 支持原生TextureView混合渲染

## 注意事项
- 始终参考[Flutter官方文档](https://flutter.dev/docs)
- 确保使用最新Flutter开发最佳实践
- 保持代码质量和性能优化

- 重视用户体验和界面美观性